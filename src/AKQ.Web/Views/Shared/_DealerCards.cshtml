        <div class="playAreaDealer">
    @TrickBox("west")
    <div class="pull-left">
        @TrickBox("north")
        @TrickBox("south")
    </div>
    @TrickBox("east")
</div>
@helper TrickBox(string side)
{
    var firstLetter = side[0].ToString();
    <!-- ko with: currentTrick().@firstLetter -->                            
    <div class="@side box">
        <!--ko if: isEmpty() && !(isCurrent() && $root.hands['@firstLetter.ToUpper()'].hasControl()) -->
        <div class="letter" data-bind="css:{rotateX: isCurrent }">
            @firstLetter.ToUpper()
        </div>
        <!-- /ko -->
        <!--ko if: isEmpty() && isCurrent() && $root.hands['@firstLetter.ToUpper()'].hasControl() -->
        <div class="@side">
            @ArrowFor(side)
        </div>
        <!-- /ko -->
        <!-- ko with: trickCard -->
        <div class="card" data-bind="template:'cardTemplate', forecolor: color, css: {winningCard: $parent.isWinner}"></div>
        <!-- /ko -->
    </div>
    <!-- /ko -->   
}

@helper ArrowFor(string side)
{
    string arrow = null;
    switch (side)
    {
        case "north":
            arrow = "&#8679";
            break;
        case "south":
            arrow = "&#8681";
            break;
        case "east":
            arrow = "→";
            break;
        case "west":
            arrow = "←";
            break;
    }
    <span class="arrow">@Html.Raw(arrow)</span>
}